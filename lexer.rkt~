#lang racket


(require parser-tools/lex
         (prefix-in : parser-tools/lex-sre)
         parser-tools/yacc)

(define simple-python-lexer
  (lexer
   ((eof) (token-EOF))
   (";" (token-semicolon))
   ("pass" (token-pass))
   ("break" (token-break))
   ("continue" (token-continue))
   ("equal" (token-equal-sign))
   ("return" (token-return))
   ("global" (token-global))
   ("def" (token-def))
   ("(" (token-lpar))
   (")" (token-rpar))
   (":" (token-colon))
   ("():" (token-empty-params))
   ("," (token-comma))
   ("if" (token-if))
   ("else" (token-else))
   ("for" (token-for))
   ("in" (token-in))
   ("or" (token-or))
   ("and" (token-and))
   ("not" (token-not))
   ("=" (token-equal-sign))
   ("==" (token-eq))
   ("<" (token-lt))
   (">" (token-gt))
   ("+" (token-plus))
   ("-" (token-minus))
   ("*" (token-multiply))
   ("/" (token-divide))
   ("**" (token-power))
   ("[" (token-lbra))
   ("]" (token-rbra))
   ("()" (token-empty-args))
   ("True" (token-true))
   ("False" (token-false))
   ("None" (token-none))
   ("[]" (token-empty-list))
   ((:or (:+ (char-range #\0 #\9))
         (:: (:+ (char-range #\0 #\9)) #\. (:+ (char-range #\0 #\9))))
    (token-NUMBER (string->number lexeme)))
   ((:: (:+ (:or #\_ (char-range #\a #\z) (char-range #\A #\Z))) (:* (:or #\_ (char-range #\0 #\9) (char-range #\a #\z) (char-range #\A #\Z))))
    (token-ID lexeme))
   (whitespace (simple-python-lexer input-port))))

(define-tokens a (NUMBER ID))
(define-empty-tokens b (EOF semicolon pass break continue equal-sign return global def rpar lpar colon empty-params comma if else for in or and not eq lt gt plus minus multiply divide power lbra rbra empty-args true false none empty-list))


;test
(define lex-this (lambda (lexer input) (lambda () (lexer input))))
(define your-lexer (lex-this simple-python-lexer (open-input-string "def f():
    global a;
    a = a + 1;
    ;
a = 2;
print(a);
b = f();
print(a);")))
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)
(your-lexer)

(define my-lexer (lex-this simple-python-lexer (open-input-string "def f():
     global a;
     a = a + 1;
     ;
 b = f();")))

(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)

(define his-lexer (lex-this simple-python-lexer (open-input-string "def add_one(n):
    return n + 1;
;

def f(n):
    a = add_one(n);
    b = print(a);
;
c = f(7);")))

(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)
(his-lexer)